[1]Intro
My talk is on Vagrant Virtual Machines, provisioning of the same using Ansible an attempt towards making team scaling and ramp ups less painful and reduce the initial dip in productivity.

[2]Common Problems faced with team expansion
Team expansions always lead to initial drop of productivity. There are a lot of problems whenever new developers join the team. The team productivity may increase after all the new joinees have been induced to what the team has been working on and once they are made capable to contribute to the project. But the enablement part is the most painful part, and does eat up a lot of utilisation.

[3]Setting up the development environment
So when new developers join the team, before they can start with understanding the codebase, their development environments need to be setup. Now they cannot even start with understanding the codebase until their development environment is setup, and they can see the application working on their computer. So how many of you have seen development environment setup procedures which involve a lot of phrases like - "Run that script, but yeah run that before this, and make sure you have this version of that software installed before that. I don't know why this isn't working on your computer, it works just fine for me, and I followed the same steps."

[4]Development Environment Setup
Initial Dip in Team productivity
    A team usually is ramped up to increase the productivity of the project. But whenever a new member joins the team there is always an initial drop in team and project productivity because atleast one older team member has to help out the new member with setting up the development environment and also explain the codebase. Now removing the initial drop in team productivity is almost impossible. But the delta between a new member joining and impacting the team productivity in a positive can be cut down.
Recurring problem
    When a project is ramping up, it rarely is a case that all the new members join the team together. So when the members come in asynchronously, the project productivity takes a recurring hit. So cutting down the previously mentioned delta will help a lot, since it is then multiplied by the number of times this procedure is repeated.

[6]Development Environment Setup
Different Operating Systems
    Different team additions may have different operating systems and hardware. The difference in operating systems makes it an even more time consuming process, and sometimes even spikes(looking at you windows). The difference in installing a simple thing like Google Chrome between a Centos 6.5 machine and an Ubuntu 12.04 is huge. Imagine that over multiple databases, different development kits of different languages and different plugins. They also involve following different set of procedures to attain the same things on different machines, so even documentation won't help there because every operating system will have different procedures to attain the same thing. Even the same bash scripts won't work here. Even different installations of the same operating systems will have issues like directory permissions, which may lead to some scripts failing.

[7]Development Environment Setup
Automated Scripts may it be Shell, Puppet, Chef or Ansible
    Total automation scripts are very difficult to write when writing for different operating systems, or even the same operating system but for different installations. Making them idempotent and work on dirty environments is extremely difficult and extremely time consuming. There is always that one directory which might have a different owner or permissions on someone else's machine, or a simple non update of an environment variable can fail an installation. Freaking Locale. LC_ALL and stuff.

[8]Difference in Environments
    A project will have multiple environments, like the CI, Staging, QA etc, differs project to project. But there will always be a lot of differences between the dev environment and the environments on the cloud or wherever they are hosted. They can range from different operating systems to different environment variable settings. Now even if all the environments have been setup using the same automation scripts run on identical Operating Systems, they will still always be different to the development environment, because the development environment is always dirty with many different factors, like other softwares serving as side-effects, the environment variables etc.

[9]Codebase requirement conflict
    If the development machine is being to used to work on multiple codebases at the same time, different stack or the same stack, it may lead to a lot of conflicts between the different dependencies of different codebases. So Python will offer something like virtual environments, ruby will have rvm, but it still is very difficult to avoid conflicts, or unexpected failure of code. Something as simple as installing a gem for one codebase and not adding that gem to the other codebase's gemfile, will work out on the local environment but will definitely fail on CI. Also for one software you might have to modify like upgrade or downgrade a dependency, which might lead to the other software failing, if both of them are using the same dependency. Installing multiple versions of databases is also very difficult, like using Postgres 8.4 and Post 9.0, the PSQL server will be running on multiple ports on the dev environent but on the CI both will assume the default port. A lot of work needs to be done to use the virtualization tools provided by the languages. Something small like separating out the logs for two projects.

[10]Virtualization
    There are three types of virtualizations. Full Virtualization, Partial Virtualization and Para virtualization. I will only be covering Full virtualization. In full virtualization enough hardware is simulated from the actual hardware to support an unmodified guest operating system. The other techniques have their own usages, like AWS uses para virtualization using XEN. Paravirtualization requires OS modification.

[11]VirtualBox
    Virtual box is a full virtualization software, it helps spin off Virtual machines running operating system of choice by simulating hardware from the host machine. There are many full virtualization softwares like Virtual Box and VM Ware, but only VirtualBox will be covered in the scope of this talk. Since it is free, open source so can be used by anyone. VirtualBox allows one to create multiple Virtual machines running different operating systems on the same host machine. It also supports bridging of the real hardware interfaces to the virtual machines. It also assigns some HDD space to each virtual machine where the operating system is installed, and other requirements. It also has support for Operating systems with graphical user interface.

[12]Vagrant Introduction
  Vagrant is a wrapper over Virtual box, which makes managing multiple virtual machines easier and faster. It also offers configurability over regular Virtual Machines. Also makes it extremely easy to use virtual machines where you can just use your own terminal manipulating the virtual machine. Vagrant offers a lot of abstraction over regular virtualbox virtual machines and simple things like shared folders, internet connectivity inside the VM are handled in most cases without any extra effort. The biggest advantage being the ease with which you can plugin configurations and change them. The time it takes to setup a vagrant managed virtual machine to the desired state is much less than a raw VirtualBox Virtual Machine.

[13]Vagrantfile
  The Virtual Machine's configuration can be managed using the Vagrantfile. The Vagrantfile has to be placed in the project directory and also its better to push it to version control. The Vagrantfile covers everything, from what base box to use, or from where to download the base box from etc. Port forwarding is also configured in the Vagrantfile, so a webserver is running in the Virtual Machine on say on the port 80, so it can be forwarded to any unused port on the host machine. A private network or a public netwrok IP can also be assigned to the VM and its configuration can be specified in the Vagrant file. So you ssh into the Vagrant managaed VM from the host machine. The ssh configurations are also specified in the Vagrantfile.
